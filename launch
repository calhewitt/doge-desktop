#!/usr/bin/python

import gtk
import webkit
from subprocess import Popen
import sys
import os
import json

print """
--------------------------------------------------------------------
             DogeDE: The most wow Desktop Environment
---------------------------------------------------------------------
"""

def start_app(package_name):
	print "STARTING: " + package_name
	Popen(package_name.split(" "), shell=False, close_fds=True)
	# Unfocus the window, so that the newly started one has focus
	win.set_focus(None)

def desktop_action(action):
	# For various actions like logging off...
	if action == "logoff":
		print "\nBYEEE\n\n"
		sys.exit(0)

def wv_action(view, frame, req, data=None):
	# Called when the webview attempts a navigation change
	uri = req.get_uri()
	scheme, path = uri.split(':', 1)
	if scheme == 'run':
		start_app(path)
		return True
	elif scheme == 'desktop':
		desktop_action(path)
		return True
	else:
		return False

def load_finished(view, frame):
	applications = configuration["applications"]
	for name, command in applications.iteritems():
		view.execute_script(" addApplication('" + name +  "', '" + command + "'); ")
	# Render dogeisms (random positioning, etc)
	view.execute_script(" render(); ")

def button_press(widget, event):
	# Load up the context menu if the user right-clicks on the desktop
	if event.type == gtk.gdk.BUTTON_PRESS and event.button == 3:
		widget.popup(None, None, None, event.button, event.time)
		pass

def menuitem_response(widget, string):
	index = menu_items.index(string)
	if index == 0:
		start_app(configuration["default-text-editor"] + " " + 
			os.path.dirname(os.path.realpath(__file__)) + "/configuration.json")
	elif index == 1:
		view.execute_script("render()")

# Load config file
configuration = json.loads(open(os.path.dirname(os.path.realpath(__file__)) + "/configuration.json").read())

# Set up a window with a webview to display the lovely desktop
view = webkit.WebView()
view.connect("navigation-requested", wv_action) 
view.connect("load-finished", load_finished)

sw = gtk.ScrolledWindow() 
sw.add(view) 

win = gtk.Window(gtk.WINDOW_TOPLEVEL) 
# Tell the OS that the window should be trated as a desktop
win.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_DESKTOP)
win.set_title("Desktop")

win.set_keep_below(True)
win.stick()

# Get the user's screen dimensions and resize the window appropriately
screen = win.get_screen()
width, height = screen.get_width(), screen.get_height()
win.resize(width, height)

# Set up custom context menu for right clicks on the desktop
menu = gtk.Menu()
menu_items = ["Edit Programs", "Reposition Dogeisms"]
for item in menu_items:
	menu_item = gtk.MenuItem(item)
	menu.append(menu_item)
	menu_item.show()
	menu_item.connect("activate", menuitem_response, item)
# Link the menu to a button press event on the webview
view.connect_object("event", button_press, menu)

win.add(sw) 
win.show_all() 

view.open("file://" + os.path.dirname(os.path.realpath(__file__)) + "/desktop.html") 
win.connect("delete-event", gtk.main_quit)
gtk.main()
